{"version":3,"file":"training-df488b89.js","sources":["../../../../apollo/carousel.js","../../../../pages/gallery/training.vue"],"sourcesContent":["import gql from \"graphql-tag\";\n\n\nexport const GET_CAROUSEL_BY_ID = gql`\n    query GetCarouselByIdQuery($id: ID) {\n        getCarouselById(id: $id) {\n            id\n            route\n            order\n            images {\n                imageUrl\n                alt\n                title\n                paragraph\n            }\n        }\n    }\n`;\nexport const GET_CAROUSEL_BY_ROUTE = gql`\n    query GetCarouselByRouteQuery($route: String) {\n        getCarouselByRoute(route: $route) {\n            id\n            route\n            order\n            images {\n                imageUrl\n                alt\n                title\n                paragraph\n            }\n        }\n    }\n`;\n\nexport const UPDATE_CAROUSEL = gql`\n    mutation UpdateCarouselMutation($carousel: CarouselInput) {\n        updateCarousel(carousel: $carousel) {\n            id\n            route\n            order\n            images {\n                imageUrl\n                paragraph\n                title\n                alt\n            }\n        }\n    }\n`;\n","<template>\n    <section>\n        <ClientOnly>\n            <!-- <div v-for=\"carousel in getCarouselByRoute\" id=\"galleryCarousel\" :key=\"carousel.id\"\n                class=\"swiper carousel slide mySwiper\" data-bs-interval=\"1500\" data-bs-ride=\"carousel\">\n                <div class=\"carousel-indicators\">\n                    <button v-for=\"(image, i) in carousel.images\" :key=\"generateId(image.title)\" type=\"button\"\n                        data-bs-target=\"#galleryCarousel\" :data-slide-to=\"i\" :data-bs-slide-to=\"i\"\n                        :class=\"i == 0 ? 'active' : null\" aria-current=\"true\" aria-label=\"Slide 1\" />\n                </div>\n                Wrapper for slides \n                <div class=\"carousel-inner\">\n                    <div v-for=\"(image, i) in carousel.images\" :key=\"image.imageUrl\"\n                        :class=\"`carousel-item  ${i == 0 ? 'active' : ''}`\">\n                        <img :src=\"image.imageUrl\" class=\"img-fluid\" :alt=\"image.alt\">\n                        <div class=\"carousel-caption d-none d-md-block\">\n                            <h3>{{ image.title }}</h3>\n                            <p v-show=\"image.paragraph\">\n                                {{ image.paragraph }}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n                 Left and right controls \n                <div class=\"carousel-dark\">\n                    <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#galleryCarousel\"\n                        data-bs-slide=\"prev\">\n                        <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\" />\n                        <span class=\"visually-hidden\">Previous</span>\n                    </button>\n                    <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#galleryCarousel\"\n                        data-bs-slide=\"next\">\n                        <span class=\"carousel-control-next-icon\" aria-hidden=\"true\" />\n                        <span class=\"visually-hidden\">Next</span>\n                    </button>\n                </div>\n            </div> \n\n            <Carousel :value=\"getCarouselByRoute\" :numVisible=\"1\" :numScroll=\"1\" :responsiveOptions=\"responsiveOptions\">\n                <template #item=\"slotProps\">\n                    <div v-for=\"(image, i) in slotProps.data.carousel.images\" :key=\"image.imageUrl\"\n                        :class=\"`carousel-item  ${i == 0 ? 'active' : ''}`\">\n                        <img :src=\"image.imageUrl\" class=\"img-fluid\" :alt=\"image.alt\">\n                        <div class=\"carousel-caption d-none d-md-block\">\n                            <h3>{{ image.title }}</h3>\n                            <p v-show=\"image.paragraph\">\n                                {{ image.paragraph }}\n                            </p>\n                        </div>\n                    </div>\n                </template>\n            </Carousel>-->\n\n        </ClientOnly>\n        <div v-for=\"masonry in getMasonryByRoute\" :key=\"masonry.id\">\n            <h1>{{ masonry.title }}</h1>\n            <masonry-wall :items=\"masonry.images\" :ssr-columns=\"1\" :column-width=\"300\" :gap=\"16\">\n                <template #default=\"{ item }\">\n                    <img class=\"img-fluid\" :src=\"item.imageUrl\" :alt=\"item.alt\">\n                    <div v-if=\"item.title || item.paragraph\" class=\"Content\">\n                        <h5 class=\"text-ellipsis-1l\">\n                            {{ item.title }}\n                        </h5>\n                        <p class=\"text-ellipsis-2l\">\n                            {{ item.paragraph }}\n                        </p>\n                    </div>\n                </template>\n            </masonry-wall>\n        </div>\n    </section>\n</template>\n\n<script setup>\nimport { GET_CAROUSEL_BY_ROUTE } from '~/apollo/carousel';\nimport { GET_MASONRY_BY_ROUTE } from '~/apollo/masonry';\n// import { Carousel } from \"bootstrap\";\n\nconst store = useMainStore();\nconst { getMasonries: masonries } = storeToRefs(store);\n\nconst getMasonaryByRouteResponse = await useAsyncQuery(GET_MASONRY_BY_ROUTE, { route: '/gallery/training' });\nconst getMasonryByRoute = getMasonaryByRouteResponse.data.value?.getMasonryByRoute;\n\nconst getCarouselByRouteResponse = await useAsyncQuery(GET_CAROUSEL_BY_ROUTE, { route: '/gallery/training' });\nconst getCarouselByRoute = getCarouselByRouteResponse.data.value?.getCarouselByRoute;\n\n\n// onMounted(() => {\n    // if (document) {\n    //     const galleryCarousel = document.querySelector(\"#galleryCarousel\");\n    //     new Carousel(galleryCarousel).cycle();\n    // }\n// })\n</script>\n\n\n<style lang=\"scss\" scoped>\n.swiper {\n    height: 60vh;\n    max-width: 80vw;\n\n    .grid-item {\n        position: relative;\n    }\n\n    div.carousel-inner,\n    .carousel-item {\n        height: inherit;\n    }\n\n    img {\n        display: block;\n        width: 100%;\n        max-height: 100%;\n        object-fit: contain;\n    }\n}\n</style>\n"],"names":["_withAsyncContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAe3B,MAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AC4C/B,UAAM,QAAQ,aAAY;AACU,gBAAY,KAAK;AAErD,UAAM,8BAAmC,CAAA,QAAA,SAAA,IAAAA,iBAAA,MAAA,cAAc,sBAAsB,EAAE,OAAO,oBAAmB,CAAE,CAAA;AAC3G,UAAM,qBAAoB,gCAA2B,KAAK,UAAhC,mBAAuC;AAEjE,UAAM,8BAAmC,CAAA,QAAA,SAAA,IAAAA,iBAAA,MAAA,cAAc,uBAAuB,EAAE,OAAO,oBAAmB,CAAE,CAAA;AACjF,qCAA2B,KAAK,UAAhC,mBAAuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}